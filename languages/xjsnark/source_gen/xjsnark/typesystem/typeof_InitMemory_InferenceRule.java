package xjsnark.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class typeof_InitMemory_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_InitMemory_InferenceRule() {
  }
  public void applyRule(final SNode initMemory, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      final SNode t = typeCheckingContext.typeOf(SLinkOperations.getTarget(initMemory, MetaAdapterFactory.getContainmentLink(0x688d542e2a3492cL, 0xa31f0e921fd6a8fbL, 0x1fa68170270e2608L, 0x1fa68170270e260aL, "argArray")), "r:9ab9fec9-ed9e-4d25-890a-7574633bec2e(xjsnark.typesystem)", "2280652580002536527", true);
      typeCheckingContext.whenConcrete(t, new Runnable() {
        public void run() {
          SNode memType = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x688d542e2a3492cL, 0xa31f0e921fd6a8fbL, 0x1fa68170270e25b5L, "xjsnark.structure.MemoryType")));
          SLinkOperations.setTarget(memType, MetaAdapterFactory.getContainmentLink(0x688d542e2a3492cL, 0xa31f0e921fd6a8fbL, 0x1fa68170270e25b5L, 0x1fa68170270e25c5L, "type"), SNodeOperations.as(SLinkOperations.getTarget(SNodeOperations.as(typeCheckingContext.getExpandedNode(t), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d819f7L, "jetbrains.mps.baseLanguage.structure.ArrayType")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d819f7L, 0xf940d819f8L, "componentType")), MetaAdapterFactory.getConcept(0x688d542e2a3492cL, 0xa31f0e921fd6a8fbL, 0x61502e94ebf30481L, "xjsnark.structure.XjsnarkType")));
          {
            SNode _nodeToCheck_1029348928467 = initMemory;
            EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:9ab9fec9-ed9e-4d25-890a-7574633bec2e(xjsnark.typesystem)", "2280652580001309187", 0, null);
            typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:9ab9fec9-ed9e-4d25-890a-7574633bec2e(xjsnark.typesystem)", "2280652580001306550", true), (SNode) memType, _info_12389875345);
          }
        }
      }, "r:9ab9fec9-ed9e-4d25-890a-7574633bec2e(xjsnark.typesystem)", "2280652580002536426", false, false);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0x688d542e2a3492cL, 0xa31f0e921fd6a8fbL, 0x1fa68170270e2608L, "xjsnark.structure.InitMemory");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
}
