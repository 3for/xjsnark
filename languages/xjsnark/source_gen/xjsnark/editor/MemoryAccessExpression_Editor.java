package xjsnark.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.lang.editor.editor.Styles_StyleSheet;
import jetbrains.mps.baseLanguage.editor.ArrayAccessExpression_Actions;

public class MemoryAccessExpression_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_guksev_a(editorContext, node);
  }
  private EditorCell createCollection_guksev_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_guksev_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createRefNode_guksev_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_guksev_b0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_guksev_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_guksev_d0(editorContext, node));
    return editorCell;
  }
  private EditorCell createRefNode_guksev_a0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new MemoryAccessExpression_Editor.memorySingleRoleHandler_guksev_a0(node, MetaAdapterFactory.getContainmentLink(0x688d542e2a3492cL, 0xa31f0e921fd6a8fbL, 0x1fa6817027253167L, 0x1fa681702725316cL, "memory"), editorContext);
    return provider.createCell();
  }
  private class memorySingleRoleHandler_guksev_a0 extends SingleRoleCellProvider {
    public memorySingleRoleHandler_guksev_a0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("memory");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_memory");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no memory>";
    }
  }
  private EditorCell createConstant_guksev_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "[");
    editorCell.setCellId("Constant_guksev_b0");
    Style style = new StyleImpl();
    Styles_StyleSheet.apply_LeftParenAfterName(style, editorCell);
    editorCell.getStyle().putAll(style);
    ArrayAccessExpression_Actions.setCellActions(editorCell, node, editorContext);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_guksev_c0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new MemoryAccessExpression_Editor.indexSingleRoleHandler_guksev_c0(node, MetaAdapterFactory.getContainmentLink(0x688d542e2a3492cL, 0xa31f0e921fd6a8fbL, 0x1fa6817027253167L, 0x1fa681702725316aL, "index"), editorContext);
    return provider.createCell();
  }
  private class indexSingleRoleHandler_guksev_c0 extends SingleRoleCellProvider {
    public indexSingleRoleHandler_guksev_c0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("index");
      }
      ArrayAccessExpression_Actions.setCellActions(editorCell, myOwnerNode, myEditorContext);
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_index");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no index>";
    }
  }
  private EditorCell createConstant_guksev_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "]");
    editorCell.setCellId("Constant_guksev_d0");
    Style style = new StyleImpl();
    Styles_StyleSheet.apply_RightParen(style, editorCell);
    editorCell.getStyle().putAll(style);
    ArrayAccessExpression_Actions.setCellActions(editorCell, node, editorContext);
    editorCell.setDefaultText("");
    return editorCell;
  }
}
