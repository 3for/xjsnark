package xjsnark.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.lang.editor.editor.Styles_StyleSheet;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.baseLanguage.editor.Delete_Loop;
import jetbrains.mps.nodeEditor.cellMenu.CompositeSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.BasicCellContext;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteInfoPartExt;
import jetbrains.mps.lang.editor.generator.internal.AbstractCellMenuPart_ReplaceNode_CustomNodeConcept;
import jetbrains.mps.baseLanguage.editor.DeleteCondition;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;
import jetbrains.mps.baseLanguage.editor.BaseLanguageStyle_StyleSheet;

public class BoundedLoop_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_njq1r9_a(editorContext, node);
  }
  private EditorCell createCollection_njq1r9_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_njq1r9_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_njq1r9_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_njq1r9_b0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_njq1r9_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_njq1r9_d0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_njq1r9_e0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_njq1r9_f0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_njq1r9_g0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_njq1r9_h0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_njq1r9_i0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_njq1r9_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "bwhile");
    editorCell.setCellId("Constant_njq1r9_a0");
    Style style = new StyleImpl();
    Styles_StyleSheet.apply_KeyWord(style, editorCell);
    style.set(StyleAttributes.EDITABLE, 0, true);
    style.set(StyleAttributes.RT_ANCHOR_TAG, 0, "ext_1_RTransform");
    editorCell.getStyle().putAll(style);
    Delete_Loop.setCellActions(editorCell, node, editorContext);
    editorCell.setDefaultText("");
    editorCell.setSubstituteInfo(new CompositeSubstituteInfo(editorContext, new BasicCellContext(node), new SubstituteInfoPartExt[]{new BoundedLoop_Editor.ReplaceWith_IfStatement_cellMenu_njq1r9_a0a0(), new BoundedLoop_Editor.ReplaceWith_DoWhileStatement_cellMenu_njq1r9_b0a0(), new BoundedLoop_Editor.ReplaceWith_ForStatement_cellMenu_njq1r9_c0a0(), new BoundedLoop_Editor.ReplaceWith_ForeachStatement_cellMenu_njq1r9_d0a0()}));
    return editorCell;
  }
  public static class ReplaceWith_IfStatement_cellMenu_njq1r9_a0a0 extends AbstractCellMenuPart_ReplaceNode_CustomNodeConcept {
    public ReplaceWith_IfStatement_cellMenu_njq1r9_a0a0() {
    }
    public String getReplacementConceptName() {
      return "jetbrains.mps.baseLanguage.structure.IfStatement";
    }
  }
  public static class ReplaceWith_DoWhileStatement_cellMenu_njq1r9_b0a0 extends AbstractCellMenuPart_ReplaceNode_CustomNodeConcept {
    public ReplaceWith_DoWhileStatement_cellMenu_njq1r9_b0a0() {
    }
    public String getReplacementConceptName() {
      return "jetbrains.mps.baseLanguage.structure.DoWhileStatement";
    }
  }
  public static class ReplaceWith_ForStatement_cellMenu_njq1r9_c0a0 extends AbstractCellMenuPart_ReplaceNode_CustomNodeConcept {
    public ReplaceWith_ForStatement_cellMenu_njq1r9_c0a0() {
    }
    public String getReplacementConceptName() {
      return "jetbrains.mps.baseLanguage.structure.ForStatement";
    }
  }
  public static class ReplaceWith_ForeachStatement_cellMenu_njq1r9_d0a0 extends AbstractCellMenuPart_ReplaceNode_CustomNodeConcept {
    public ReplaceWith_ForeachStatement_cellMenu_njq1r9_d0a0() {
    }
    public String getReplacementConceptName() {
      return "jetbrains.mps.baseLanguage.structure.ForeachStatement";
    }
  }
  private EditorCell createConstant_njq1r9_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "(");
    editorCell.setCellId("Constant_njq1r9_b0");
    Style style = new StyleImpl();
    Styles_StyleSheet.apply_LeftParen(style, editorCell);
    editorCell.getStyle().putAll(style);
    DeleteCondition.setCellActions(editorCell, node, editorContext);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_njq1r9_c0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new BoundedLoop_Editor.conditionSingleRoleHandler_njq1r9_c0(node, MetaAdapterFactory.getContainmentLink(0x688d542e2a3492cL, 0xa31f0e921fd6a8fbL, 0x12cb358a1aa7c343L, 0xfaa4bf0f30L, "condition"), editorContext);
    return provider.createCell();
  }
  private class conditionSingleRoleHandler_njq1r9_c0 extends SingleRoleCellProvider {
    public conditionSingleRoleHandler_njq1r9_c0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("condition");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_condition");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no condition>";
    }
  }
  private EditorCell createConstant_njq1r9_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ";");
    editorCell.setCellId("Constant_njq1r9_d0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_njq1r9_e0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new BoundedLoop_Editor.boundSingleRoleHandler_njq1r9_e0(node, MetaAdapterFactory.getContainmentLink(0x688d542e2a3492cL, 0xa31f0e921fd6a8fbL, 0x12cb358a1aa7c343L, 0x12cb358a1aa7e6a6L, "bound"), editorContext);
    return provider.createCell();
  }
  private class boundSingleRoleHandler_njq1r9_e0 extends SingleRoleCellProvider {
    public boundSingleRoleHandler_njq1r9_e0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("bound");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_bound");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no bound>";
    }
  }
  private EditorCell createConstant_njq1r9_f0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ")");
    editorCell.setCellId("Constant_njq1r9_f0");
    Style style = new StyleImpl();
    Styles_StyleSheet.apply_RightParen(style, editorCell);
    editorCell.getStyle().putAll(style);
    DeleteCondition.setCellActions(editorCell, node, editorContext);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_njq1r9_g0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "{");
    editorCell.setCellId("Constant_njq1r9_g0");
    Style style = new StyleImpl();
    BaseLanguageStyle_StyleSheet.apply_LeftBrace(style, editorCell);
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    Delete_Loop.setCellActions(editorCell, node, editorContext);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_njq1r9_h0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new BoundedLoop_Editor.bodySingleRoleHandler_njq1r9_h0(node, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10cb1ac5adeL, 0x10cb1ada6e8L, "body"), editorContext);
    return provider.createCell();
  }
  private class bodySingleRoleHandler_njq1r9_h0 extends SingleRoleCellProvider {
    public bodySingleRoleHandler_njq1r9_h0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("body");
      }
      Style style = new StyleImpl();
      SNode node = myOwnerNode;
      EditorContext editorContext = myEditorContext;
      style.set(StyleAttributes.INDENT_LAYOUT_INDENT, 0, true);
      style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
      editorCell.getStyle().putAll(style);
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_body");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no body>";
    }
  }
  private EditorCell createConstant_njq1r9_i0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "}");
    editorCell.setCellId("Constant_njq1r9_i0");
    Style style = new StyleImpl();
    BaseLanguageStyle_StyleSheet.apply_RightBrace(style, editorCell);
    editorCell.getStyle().putAll(style);
    Delete_Loop.setCellActions(editorCell, node, editorContext);
    editorCell.setDefaultText("");
    return editorCell;
  }
}
