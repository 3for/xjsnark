package xjsnark.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class PermutationVerifier_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_9j7g08_a(editorContext, node);
  }
  private EditorCell createCollection_9j7g08_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_9j7g08_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_9j7g08_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_9j7g08_b0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_9j7g08_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_9j7g08_d0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_9j7g08_e0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_9j7g08_f0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_9j7g08_g0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_9j7g08_h0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_9j7g08_i0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_9j7g08_j0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_9j7g08_k0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_9j7g08_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "verify_permutation");
    editorCell.setCellId("Constant_9j7g08_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_9j7g08_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "<");
    editorCell.setCellId("Constant_9j7g08_b0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_9j7g08_c0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new PermutationVerifier_Editor.typeSingleRoleHandler_9j7g08_c0(node, MetaAdapterFactory.getContainmentLink(0x688d542e2a3492cL, 0xa31f0e921fd6a8fbL, 0x280cd37f850212aaL, 0x280cd37f850212b2L, "type"), editorContext);
    return provider.createCell();
  }
  private class typeSingleRoleHandler_9j7g08_c0 extends SingleRoleCellProvider {
    public typeSingleRoleHandler_9j7g08_c0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("type");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_type");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no type>";
    }
  }
  private EditorCell createConstant_9j7g08_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ">");
    editorCell.setCellId("Constant_9j7g08_d0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_9j7g08_e0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "(");
    editorCell.setCellId("Constant_9j7g08_e0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_9j7g08_f0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new PermutationVerifier_Editor.array1SingleRoleHandler_9j7g08_f0(node, MetaAdapterFactory.getContainmentLink(0x688d542e2a3492cL, 0xa31f0e921fd6a8fbL, 0x280cd37f850212aaL, 0x280cd37f850212b3L, "array1"), editorContext);
    return provider.createCell();
  }
  private class array1SingleRoleHandler_9j7g08_f0 extends SingleRoleCellProvider {
    public array1SingleRoleHandler_9j7g08_f0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("array1");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_array1");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no array1>";
    }
  }
  private EditorCell createConstant_9j7g08_g0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ",");
    editorCell.setCellId("Constant_9j7g08_g0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_9j7g08_h0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new PermutationVerifier_Editor.array2SingleRoleHandler_9j7g08_h0(node, MetaAdapterFactory.getContainmentLink(0x688d542e2a3492cL, 0xa31f0e921fd6a8fbL, 0x280cd37f850212aaL, 0x280cd37f850212b6L, "array2"), editorContext);
    return provider.createCell();
  }
  private class array2SingleRoleHandler_9j7g08_h0 extends SingleRoleCellProvider {
    public array2SingleRoleHandler_9j7g08_h0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("array2");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_array2");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no array2>";
    }
  }
  private EditorCell createConstant_9j7g08_i0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ",");
    editorCell.setCellId("Constant_9j7g08_i0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_9j7g08_j0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new PermutationVerifier_Editor.idSingleRoleHandler_9j7g08_j0(node, MetaAdapterFactory.getContainmentLink(0x688d542e2a3492cL, 0xa31f0e921fd6a8fbL, 0x280cd37f850212aaL, 0x280cd37f850212baL, "id"), editorContext);
    return provider.createCell();
  }
  private class idSingleRoleHandler_9j7g08_j0 extends SingleRoleCellProvider {
    public idSingleRoleHandler_9j7g08_j0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("id");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_id");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no id>";
    }
  }
  private EditorCell createConstant_9j7g08_k0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ");");
    editorCell.setCellId("Constant_9j7g08_k0");
    editorCell.setDefaultText("");
    return editorCell;
  }
}
